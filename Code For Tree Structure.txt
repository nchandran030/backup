 /**====================1============================
     * This is the first code with this code i am able to read all the folders by 
     * using fs.readdir
     * 
     */
 getFileFolderDetailsDirectoryTree() {
        console.log('FolderDetails|getFileFolderDetailsDirectoryTree ');
        try {
            let folderData;
            return new Promise((resolve, reject) => {
                let children = [];
                let content = {
                    'name': 'FilesFolderData',
                    'path': 'd:/FilesFolderData',
                    'children': children
                };
                fs.readdir(directory, function (err, items) {
                    for (var i = 0; i < items.length; i++) {
                        let data = {
                            'name': items[i],
                            'path': items[i].PATH
                        }
                        children.push(data);
                    }
                    console.log('========final children data=============== ', children);
                    content.children = children;
                    resolve(content);
                });
            });
        } catch (err) {
            console.log('Error Occured in FolderDetails|getFileFolderDetailsDirectoryTree ', err);
        }
    }
	
	
/**========================2=================================
 * In this code I am doing recursive calling to read all the directory but the problem here is if a directory is empty
 * then it is skipping the same hence i am not creating here any json object
 */
var fs = require('fs');
var path = require('path');
const directory = 'D:/FilesFolderData';
var walk = function (dir, done) {
	var results = [];
	fs.readdir(dir, function (err, list) {
		if (err) return done(err);
		var pending = list.length;
		if (!pending) return done(null, results);
		list.forEach(function (file) {
			file = path.resolve(dir, file);
			fs.stat(file, function (err, stat) {
				if (stat && stat.isDirectory()) {
					walk(file, function (err, res) {
						results = results.concat(res);
						if (!--pending) done(null, results);
					});
				} else {
					results.push(file);
					if (!--pending) done(null, results);
				}
			});
		});
	});
};

walk(directory, function (err, results) {
	if (err) throw err;
	console.log(results);
});


 /**
 =====================3=============================
     * In this code I am getting all the ouput but i havent used here async i used only fs.readdir and for each loop
     * using fs.readdir
     * 
     */
    getFileFolderDetailsDirectoryTree() {
        console.log('FolderDetails|getFileFolderDetailsDirectoryTree ');
        try {
            return new Promise((resolve, reject) => {
                var createFolderStructure = function (dir, folderName, type, done) {
                    var results = {
                        "name": folderName,
                        "type": type,
                        "children": []
                    };
                    fs.readdir(dir, function (err, list) {
                        if (err) { return done(err); }
                        var pending = list.length;
                        if (!pending) { return done(null, results); }
                        list.forEach(function (file) {
                            fs.stat(dir + '/' + file, function (err, stat) {
                                if (stat && stat.isDirectory()) {
                                    createFolderStructure(dir + '/' + file, file, 'directory', function (err, res) {
                                        results.children.push(res);
                                        if (!--pending) { done(null, results); }
                                    });
                                } else {
                                    results.children.push({ "name": file, "path": dir + "/" + file, "type": 'file' });
                                    if (!--pending) { done(null, results); }
                                }
                            });
                        });
                    });
                };
                createFolderStructure(directory, 'folderData', 'directory', function (err, results) {
                    if (err) console.log('Error While Creating Directory ', err);
                    resolve(results);
                });
            });
        } catch (err) {
            console.log('Error Occured in FolderDetails|getFileFolderDetailsDirectoryTree ', err);
        }
    }	
	
============================4===============================
  /**
     * In this code I am getting all the ouput using async.each
     * 
     * 
     */
    getFileFolderDetailsDirectoryTree() {
        console.log('FolderDetails|getFileFolderDetailsDirectoryTree ');
        try {
            return new Promise((resolve, reject) => {
                var createFolderStructure = function (dir, folderName, type, done) {
                    var results = {
                        "name": folderName,
                        "type": type,
                        "children": []
                    };
                    fs.readdir(dir, function (err, list) {
                        if (err) { return done(err); }
                        var pending = list.length;
                        if (!pending) { return done(null, results); }
                        console.log('listdata----------------- ', list);
                        async.each(list, function (file) {
                            fs.stat(dir + '/' + file, function (err, stat) {
                                if (stat && stat.isDirectory()) {
                                    createFolderStructure(dir + '/' + file, file, 'directory', function (err, res) {
                                        results.children.push(res);
                                        if (!--pending) { done(null, results); }
                                    });
                                } else {
                                    results.children.push({ "name": file, "path": dir + "/" + file, "type": 'file' });
                                    if (!--pending) { done(null, results); }
                                }
                            });

                        }, function (err) {
                            callback(err, returnFiles);
                        });
                    });
                };
                createFolderStructure(directory, 'folderData', 'directory', function (err, results) {
                    if (err) console.log('Error While Creating Directory ', err);
                    console.log('final result with async=========== ', results);
                    resolve(results);
                });
            });
        } catch (err) {
            console.log('Error Occured in FolderDetails|getFileFolderDetailsDirectoryTree ', err);
        }
    }