<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<style>
body {
  font-family: Arial, Helvetica, sans-serif;
}

.navbar {
  overflow: hidden;
  background-color: #333;
}

.navbar a {
  float: right;
  font-size: 12px;
  color: white;
  text-align: center;
  padding: 14px 6px;
  text-decoration: none;
}

.dropdown {
  float: right;
  overflow: hidden;
}

.dropdown .dropbtn {
  font-size: 12px;  
  border: none;
  outline: none;
  color: white;
  padding: 14px 16px;
  background-color: inherit;
  font-family: inherit;
  margin: 0;
}

.navbar a:hover, .dropdown:hover .dropbtn {
  background-color: red;
}

.dropdown-content {
  display: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 95px;
  box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
  z-index: 1;
}

.dropdown-content a {
  float: none;
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
  text-align: left;
}

.dropdown-content a:hover {
  background-color: #ddd;
}

.dropdown:hover .dropdown-content {
  display: block;
}
</style>
</head>
<body>

<div class="navbar">
<a href="#home" style="float:left"><i class="fa fa-desktop" aria-hidden="true"></i>&nbsp;Service Desktop</a>
  <div class="dropdown">
    <button class="dropbtn">Theme 
      <i class="fa fa-caret-down"></i>
    </button>
    <div class="dropdown-content">
      <a href="#">Light</a>
      <a href="#">Dark</a>
    </div>
  </div> 
  <div class="dropdown">
    <button class="dropbtn">Language 
      <i class="fa fa-caret-down"></i>
    </button>
    <div class="dropdown-content">
      <a href="#">English</a>
      <a href="#">Spanish</a>
      <a href="#">Dutch</a>
    </div>
  </div>
  <div class="dropdown">
    <button class="dropbtn">Options 
      <i class="fa fa-caret-down"></i>
    </button>
    <div class="dropdown-content">
      <a href="#">File Manipulation</a>
      <a href="#">Memory Details</a>
      <a href="#">Folder Structure</a>
      <a href="#">Window Terminal</a>
      <a href="#">Auditing History</a>
    </div>
  </div>
</div>

<h3>Dropdown Menu inside a Navigation Bar</h3>
<p>Hover over the "Dropdown" link to see the dropdown menu.</p>

</body>
</html>
------------------------------------------------------
logging code--------------------------------
/**
 * Description: This class is used for getting log details
 */
const promise = require("promise");
const fs = require("fs");
const path = require("path");
const logFilePath = "./single-spa-logger.log";
const auditFilePath = "./single-spa-audit.log";
const logger = require("../util/logger").makeObject();
const os = require("os");
const lineReader = require("line-reader");

class LoggingDetails {
  constructor() {
    this.x;
  }
  static makeObject() {
    if (!this.x) {
      this.x = new LoggingDetails();
    }
    return this.x;
  }

  /**
   * This function is used for reading the log file
   */
  getLoggingDetail() {
    let replaceValue;
    try {
      logger.info("LoggingDetails|getLoggingDetail ");
      return new Promise((resolve, reject) => {
        fs.readFile(logFilePath, "utf8", (err, data) => {
          resolve(data);
        });
      });
    } catch (err) {
      logger.error("Error Occured in LoggingDetails|getLoggingDetail ", err);
    }
  }

  clearLogFile() {
    let replaceValue;
    try {
      logger.info("LoggingDetails|clearLogFile ");
      return new Promise((resolve, reject) => {
        fs.truncate(logFilePath, 0, () => {
          fs.readFile(logFilePath, "utf8", (err, data) => {
            resolve("Cleared Logs Data");
          });
        });
      });
    } catch (err) {
      logger.error("Error Occured in |LoggingDetails|clearLogFile ", err);
    }
  }

  writeAuditDataToFile(req) {
    logger.info("LoggingDetails|writeAuditDataToFile|auditData ");
    try {
      return new Promise((resolve, reject) => {
        let body = "";
        let bodyData = "";
        let auditFileContent = [];
        req.on("data", (chunk) => {
          body += chunk.toString();
          bodyData = JSON.parse(body);
          auditFileContent = bodyData.auditDataContent;
          fs.truncate(auditFilePath, 0, () => {
            for (var i = 0; i < auditFileContent.length; i++) {
              let line =
                "eventName: " +
                auditFileContent[i].eventName +
                "," +
                "eventData: " +
                auditFileContent[i].eventData +
                "," +
                "time: " +
                auditFileContent[i].time +
                ",";
              fs.open(auditFilePath, "a", 666, (e, id) => {
                fs.write(id, line + os.EOL, null, "utf8", () => {});
              });
            }
            auditFileContent = [];
            resolve("Writing To Audit File Completed");
          });
        });
      });
    } catch (err) {
      logger.error(
        "Error Occured in WindowCommands|FileManipulation|fileValueEdit ",
        err
      );
    }
  }

  getAllAuditData() {
    try {
      let o = {};
      let key = "auditData";
      o[key] = [];
      return new Promise((resolve, reject) => {
        let lines = [];
        let stringData = [];
        fs.readFile(auditFilePath, "utf8", (err, data) => {
          lines = data.split(/\r?\n/);
          for (var i = 0; i < lines.length - 1; i++) {
            stringData = lines[i].split(",");
            let auditEventName = stringData[0].split(":");
            let auditEventData = stringData[1].split(":");
            let auditEventTime = stringData[2].split(":");
            let data = {
              eventName: auditEventName[1],
              eventData: auditEventData[1],
              time: auditEventTime[1],
            };
            o[key].push(data);
          }
          resolve(o);
        });
      });
    } catch (err) {
      logger.error("Error Occured in LoggingDetails|getAllAuditData ", err);
    }
  }
}
module.exports = LoggingDetails;
